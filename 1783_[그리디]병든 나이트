import java.util.Scanner;
public class Main {
    public static void main(String[]args){
        Scanner sc = new Scanner (System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int answer = 0;
        if (N == 1 ){
            answer =1;
        }
        else if (N==2){
            answer = (4 < (M+1)/2 )? 4: (M+1)/2;
        }
        else {
            if (M <7){
                answer = ( 4 >M) ? M:4;
            }
            else {
                answer = (M-2);
            }
        }
        System.out.println(answer);
    }

}//class
/*

병든 나이트가 N * M 크기 체스판의 가장 왼쪽아래 칸에 위치해 있다.
병든 나이트는 건강한 보통 체스의 나이트와 다르게 4가지로만 움직일 수 있다.

2칸 위로, 1칸 오른쪽
1칸 위로, 2칸 오른쪽
1칸 아래로, 2칸 오른쪽
2칸 아래로, 1칸 오른쪽
병든 나이트는 병들었지만,
그래도 명색이 체스 나이트이기 때문에 많은 칸을 방문하고 싶어 한다.
병든 나이트의 이동에는 제약이 있다.
만약, 이동 횟수가 4번 이상인 경우에는 위의 이동 방법을 각각 한 번 이상 이용해야 한다.

체스판의 크기가 주어졌을 때, 병든 나이트가 방문할 수 있는 칸의 최대 개수를 출력하는
프로그램을 작성하시오. 처음에 있는 칸도 센다.

입력
첫째 줄에 체스판의 세로 길이 N와 가로 길이 M이 주어진다.
N과 M은 2,000,000,000보다 작거나 같은 자연수이다.

출력
병든 나이트가 방문할 수 있는 칸의 개수중 최댓값을 출력한다.

예제 입력 1
100 50

예제 출력 1
48



이 문제는 조건문 만으로 해결
N=1일 때는 어디로도 이동할 수 없으므로 1
N=2일 때는 위 1칸, 아래 1칸, 위 1칸 이동으로 4 가 될수도 있고
N>=3 부터는 모든 조건 다 시행가능 

N>=3  이면서 
 M이 7보다 작은 경우는 최대가 4번이고 M이 작아지면서 횟수가 줄어듦 
 M>=7 인경우는 두번만 오른쪽 2칸 이동을 사용하고 나머지 이동은 전무 +1칸을 해야 최대이기 때문에 M-2




* */
